# vim: expandtab
# -*- coding: utf-8 -*-
import random

from django.db import IntegrityError
from django.test import TestCase

from poleno.timewarp import timewarp
from poleno.mail.models import Message, Recipient
from poleno.utils.date import local_datetime_from_local, naive_date
from poleno.utils.misc import flatten
from poleno.utils.test import created_instances
from chcemvediet.apps.obligees.models import Obligee

from .. import InforequestsTestCaseMixin
from ...models import InforequestEmail, Paperwork, Action, ActionDraft

class PaperworkTest(InforequestsTestCaseMixin, TestCase):
    u"""
    Tests ``Paperwork`` model.
    """

    def test_inforequest_field(self):
        inforequest = self._create_inforequest()
        paperwork = self._create_paperwork(inforequest=inforequest)
        self.assertEqual(paperwork.inforequest, inforequest)

    def test_inforequest_field_may_not_be_null(self):
        with self.assertRaisesMessage(IntegrityError, u'inforequests_paperwork.inforequest_id may not be NULL'):
            self._create_paperwork(omit=[u'inforequest'])

    def test_obligee_field(self):
        inforequest = self._create_inforequest()
        paperwork = self._create_paperwork(inforequest=inforequest, obligee=self.obligee2)
        self.assertEqual(paperwork.obligee, self.obligee2)

    def test_obligee_field_may_not_be_null(self):
        inforequest = self._create_inforequest()
        with self.assertRaisesMessage(AssertionError, u'Paperwork.obligee is mandatory'):
            self._create_paperwork(inforequest=inforequest, omit=[u'obligee'])

    def test_historicalobligee_is_autogenerated_when_creating_new_instance(self):
        inforequest = self._create_inforequest()
        paperwork = self._create_paperwork(inforequest=inforequest, obligee=self.obligee2)
        self.assertEqual(paperwork.historicalobligee, self.obligee2.history.first())

    def test_historicalobligee_is_not_regenerated_when_saving_existing_instance(self):
        inforequest = self._create_inforequest()
        paperwork = self._create_paperwork(inforequest=inforequest, obligee=self.obligee2)
        paperwork.obligee = self.obligee1
        paperwork.save()
        paperwork = Paperwork.objects.get(pk=paperwork.pk)
        self.assertEqual(paperwork.historicalobligee, self.obligee2.history.first())

    def test_historicalobligee_autogenerated_value_is_current_obligee_revision(self):
        inforequest = self._create_inforequest()
        self.obligee2.name = u'Original Name'
        self.obligee2.save()
        self.obligee2.name = u'Changed Name'
        self.obligee2.save()
        paperwork = self._create_paperwork(inforequest=inforequest, obligee=self.obligee2)
        self.assertEqual(paperwork.historicalobligee.name, u'Changed Name')

    def test_historicalobligee_autogenerated_value_freezes_current_obligee_revision(self):
        inforequest = self._create_inforequest()
        self.obligee2.name = u'Original Name'
        self.obligee2.save()
        paperwork = self._create_paperwork(inforequest=inforequest, obligee=self.obligee2)
        self.obligee2.name = u'Changed Name'
        self.obligee2.save()
        paperwork = Paperwork.objects.get(pk=paperwork.pk)
        self.assertEqual(paperwork.historicalobligee.name, u'Original Name')

    def test_historicalobligee_may_not_be_set_explicitly(self):
        inforequest = self._create_inforequest()
        with self.assertRaisesMessage(AssertionError, u'Paperwork.historicalobligee is read-only'):
            self._create_paperwork(inforequest=inforequest, obligee=self.obligee2, historicalobligee=self.obligee2.history.first())

    def test_advanced_by_field(self):
        inforequest, paperwork, (request,) = self._create_inforequest_scenario()
        paperwork = self._create_paperwork(inforequest=inforequest, advanced_by=request)
        self.assertEqual(paperwork.advanced_by, request)

    def test_advanced_by_field_default_value_if_omitted(self):
        inforequest = self._create_inforequest()
        paperwork = self._create_paperwork(inforequest=inforequest, omit=[u'advanced_by'])
        self.assertIsNone(paperwork.advanced_by)

    def test_action_set_relation(self):
        _, paperwork, actions = self._create_inforequest_scenario(u'confirmation', u'extension')
        request, confirmation, extension = actions
        result = paperwork.action_set.all()
        self.assertEqual(list(result), [request, confirmation, extension])

    def test_action_set_relation_with_advancement(self):
        _, paperwork, actions = self._create_inforequest_scenario(u'confirmation', (u'advancement', [u'extension']), u'appeal')
        request, confirmation, (advancement, _), appeal = actions
        result = paperwork.action_set.all()
        self.assertEqual(list(result), [request, confirmation, advancement, appeal])

    def test_action_set_relation_empty_by_default(self):
        inforequest = self._create_inforequest()
        paperwork = self._create_paperwork(inforequest=inforequest)
        result = paperwork.action_set.all()
        self.assertEqual(list(result), [])

    def test_actiondraft_set_relation(self):
        inforequest, paperwork, _ = self._create_inforequest_scenario()
        draft1 = self._create_action_draft(inforequest=inforequest, paperwork=paperwork, type=ActionDraft.TYPES.CONFIRMATION)
        draft2 = self._create_action_draft(inforequest=inforequest, paperwork=paperwork, type=ActionDraft.TYPES.EXTENSION)
        result = paperwork.actiondraft_set.all()
        self.assertItemsEqual(result, [draft1, draft2])

    def test_actiondraft_set_relation_empty_by_default(self):
        _, paperwork, _ = self._create_inforequest_scenario()
        result = paperwork.actiondraft_set.all()
        self.assertItemsEqual(result, [])

    def test_default_ordering_by_historicalobligee_name_then_pk(self):
        # Several obligees with the same name and several paperworks with the same obligee, to
        # check secondary ordering.
        names = [u'aaa', u'bbb', u'ccc', u'ddd', u'ddd', u'ddd', u'ddd', u'eee']
        random.shuffle(names)
        obligees = [self._create_obligee(name=n) for n in names]
        inforequest = self._create_inforequest()
        paperworks = [self._create_paperwork(inforequest=inforequest, obligee=o) for o in obligees for i in range(3)]
        result = Paperwork.objects.all()
        self.assertEqual(list(result), sorted(paperworks, key=lambda p: (p.historicalobligee.name, p.pk)))

    def test_default_ordering_by_historicalobligee_name_even_if_the_name_changed(self):
        obligee1 = self._create_obligee(name=u'aaa')
        obligee2 = self._create_obligee(name=u'bbb')
        inforequest = self._create_inforequest()
        paperwork1 = self._create_paperwork(inforequest=inforequest, obligee=obligee1)
        paperwork2 = self._create_paperwork(inforequest=inforequest, obligee=obligee2)
        obligee1.name = u'ccc'
        obligee1.save()
        result = Paperwork.objects.all()
        self.assertEqual(list(result), [paperwork1, paperwork2])

        # For reference, check that if we were to order paperworks by current obligee name, their
        # order wound be different.
        result = Paperwork.objects.order_by(u'obligee__name').all()
        self.assertEqual(list(result), [paperwork2, paperwork1])

    def test_last_action_property(self):
        _, paperwork, actions = self._create_inforequest_scenario(u'confirmation', u'extension')
        _, _, extension = actions
        self.assertEqual(paperwork.last_action, extension)

    def test_last_action_property_with_no_actions(self):
        inforequest = self._create_inforequest()
        paperwork = self._create_paperwork(inforequest=inforequest)
        self.assertIsNone(paperwork.last_action)

    def _test_can_add_x_properties_aux(self, last_action_type, scenario, allowed, expired, branch=0):
        timewarp.jump(local_datetime_from_local(u'2010-07-05 10:33:00'))
        objs = self._create_inforequest_scenario(*scenario)
        paperwork = [o for o in flatten(objs) if isinstance(o, Paperwork)][branch]
        self.assertEqual(paperwork.last_action.type, last_action_type)

        can_add_action_names = (
                u'clarification_response',
                u'appeal',
                u'confirmation',
                u'extension',
                u'advancement',
                u'clarification_request',
                u'disclosure',
                u'refusal',
                u'affirmation',
                u'reversion',
                u'remandment',
                )

        # Check actions allowed when the last action deadline is not expired yet
        for action_name in can_add_action_names:
            value = getattr(paperwork, u'can_add_%s' % action_name)
            expected = action_name in allowed
            self.assertEqual(value, expected)

        # Check actions allowed when the last action deadline is expired
        timewarp.jump(local_datetime_from_local(u'2010-10-05 10:33:00'))
        for action_name in can_add_action_names:
            value = getattr(paperwork, u'can_add_%s' % action_name)
            expected = action_name in expired
            self.assertEqual(value, expected)

    def test_can_add_x_properties_with_last_action_request(self):
        self._test_can_add_x_properties_aux(Action.TYPES.REQUEST,
                scenario=[],
                allowed=[           u'confirmation', u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'],
                expired=[u'appeal', u'confirmation', u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'])

    def test_can_add_x_properties_with_last_action_clarification_response(self):
        self._test_can_add_x_properties_aux(Action.TYPES.CLARIFICATION_RESPONSE,
                scenario=[u'clarification_request', u'clarification_response'],
                allowed=[           u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'],
                expired=[u'appeal', u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'])

    def test_can_add_x_properties_with_last_action_appeal(self):
        self._test_can_add_x_properties_aux(Action.TYPES.APPEAL,
                scenario=[u'expiration', u'appeal'],
                allowed=[u'affirmation', u'reversion', u'remandment'],
                expired=[u'affirmation', u'reversion', u'remandment'])

    def test_can_add_x_properties_with_last_action_confirmation(self):
        self._test_can_add_x_properties_aux(Action.TYPES.CONFIRMATION,
                scenario=[u'confirmation'],
                allowed=[           u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'],
                expired=[u'appeal', u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'])

    def test_can_add_x_properties_with_last_action_extension(self):
        self._test_can_add_x_properties_aux(Action.TYPES.EXTENSION,
                scenario=[u'extension'],
                allowed=[           u'disclosure', u'refusal'],
                expired=[u'appeal', u'disclosure', u'refusal'])

    def test_can_add_x_properties_with_last_action_advancement(self):
        self._test_can_add_x_properties_aux(Action.TYPES.ADVANCEMENT,
                scenario=[u'advancement'],
                allowed=[u'appeal'],
                expired=[u'appeal'])

    def test_can_add_x_properties_with_last_action_clarification_request(self):
        self._test_can_add_x_properties_aux(Action.TYPES.CLARIFICATION_REQUEST,
                scenario=[u'clarification_request'],
                allowed=[u'clarification_response', u'clarification_request'],
                expired=[u'clarification_response', u'clarification_request'])

    def test_can_add_x_properties_with_last_action_disclosure_with_no_disclosure(self):
        self._test_can_add_x_properties_aux(Action.TYPES.DISCLOSURE,
                scenario=[(u'disclosure', dict(disclosure_level=Action.DISCLOSURE_LEVELS.NONE))],
                allowed=[u'appeal'],
                expired=[u'appeal'])

    def test_can_add_x_properties_with_last_action_disclosure_with_partial_disclosure(self):
        self._test_can_add_x_properties_aux(Action.TYPES.DISCLOSURE,
                scenario=[(u'disclosure', dict(disclosure_level=Action.DISCLOSURE_LEVELS.PARTIAL))],
                allowed=[u'appeal'],
                expired=[u'appeal'])

    def test_can_add_x_properties_with_last_action_disclosure_with_full_disclosure(self):
        self._test_can_add_x_properties_aux(Action.TYPES.DISCLOSURE,
                scenario=[(u'disclosure', dict(disclosure_level=Action.DISCLOSURE_LEVELS.FULL))],
                allowed=[],
                expired=[])

    def test_can_add_x_properties_with_last_action_refusal(self):
        self._test_can_add_x_properties_aux(Action.TYPES.REFUSAL,
                scenario=[u'refusal'],
                allowed=[u'appeal'],
                expired=[u'appeal'])

    def test_can_add_x_properties_with_last_action_affirmation(self):
        self._test_can_add_x_properties_aux(Action.TYPES.AFFIRMATION,
                scenario=[u'affirmation'],
                allowed=[],
                expired=[])

    def test_can_add_x_properties_with_last_action_reversion(self):
        self._test_can_add_x_properties_aux(Action.TYPES.REVERSION,
                scenario=[u'reversion'],
                allowed=[],
                expired=[])

    def test_can_add_x_properties_with_last_action_remandment(self):
        self._test_can_add_x_properties_aux(Action.TYPES.REMANDMENT,
                scenario=[u'refusal', u'appeal', u'remandment'],
                allowed=[           u'extension', u'disclosure', u'refusal'],
                expired=[u'appeal', u'extension', u'disclosure', u'refusal'])

    def test_can_add_x_properties_with_last_action_advanced_request(self):
        self._test_can_add_x_properties_aux(Action.TYPES.ADVANCED_REQUEST, branch=1,
                scenario=[u'advancement'],
                allowed=[           u'confirmation', u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'],
                expired=[u'appeal', u'confirmation', u'extension', u'advancement', u'clarification_request', u'disclosure', u'refusal'])

    def test_can_add_x_properties_with_last_action_expiration(self):
        self._test_can_add_x_properties_aux(Action.TYPES.EXPIRATION,
                scenario=[u'expiration'],
                allowed=[u'appeal'],
                expired=[u'appeal'])

    def test_can_add_x_properties_with_last_action_appeal_expiration(self):
        self._test_can_add_x_properties_aux(Action.TYPES.APPEAL_EXPIRATION,
                scenario=[u'appeal_expiration'],
                allowed=[],
                expired=[])

    def test_can_add_action_method(self):
        _, paperwork, _ = self._create_inforequest_scenario()
        # ``paperwork`` last action is ``REQUEST``
        self.assertFalse(paperwork.can_add_action(Action.TYPES.CLARIFICATION_RESPONSE))
        self.assertFalse(paperwork.can_add_action(Action.TYPES.APPEAL))
        self.assertTrue(paperwork.can_add_action(Action.TYPES.CONFIRMATION))
        self.assertTrue(paperwork.can_add_action(Action.TYPES.EXTENSION))
        self.assertTrue(paperwork.can_add_action(Action.TYPES.ADVANCEMENT))
        self.assertTrue(paperwork.can_add_action(Action.TYPES.CLARIFICATION_REQUEST))
        self.assertTrue(paperwork.can_add_action(Action.TYPES.DISCLOSURE))
        self.assertTrue(paperwork.can_add_action(Action.TYPES.REFUSAL))
        self.assertFalse(paperwork.can_add_action(Action.TYPES.AFFIRMATION))
        self.assertFalse(paperwork.can_add_action(Action.TYPES.REVERSION))
        self.assertFalse(paperwork.can_add_action(Action.TYPES.REMANDMENT))

    def test_can_add_action_method_raises_exception_for_request_and_implicit_actions(self):
        _, paperwork, _ = self._create_inforequest_scenario()
        with self.assertRaisesMessage(AttributeError, u"'Paperwork' object has no attribute 'can_add_request'"):
            paperwork.can_add_action(Action.TYPES.REQUEST)
        with self.assertRaisesMessage(AttributeError, u"'Paperwork' object has no attribute 'can_add_advanced_request'"):
            paperwork.can_add_action(Action.TYPES.ADVANCED_REQUEST)
        with self.assertRaisesMessage(AttributeError, u"'Paperwork' object has no attribute 'can_add_expiration'"):
            paperwork.can_add_action(Action.TYPES.EXPIRATION)
        with self.assertRaisesMessage(AttributeError, u"'Paperwork' object has no attribute 'can_add_appeal_expiration'"):
            paperwork.can_add_action(Action.TYPES.APPEAL_EXPIRATION)

    def _test_add_expiration_if_expired_method_aux(self, last_action_type, scenario, added_action_type, branch=0):
        timewarp.jump(local_datetime_from_local(u'2010-07-05 10:33:00'))
        objs = self._create_inforequest_scenario(*scenario)
        paperwork = [o for o in flatten(objs) if isinstance(o, Paperwork)][branch]
        self.assertEqual(paperwork.last_action.type, last_action_type)
        original_last_action = paperwork.last_action

        # Deadline not expired yet
        with created_instances(Action.objects) as query_set:
            paperwork.add_expiration_if_expired()
        self.assertEqual(query_set.count(), 0)

        # Any deadline is expired now
        timewarp.jump(local_datetime_from_local(u'2010-10-05 10:33:00'))
        with created_instances(Action.objects) as query_set:
            paperwork.add_expiration_if_expired()

        if added_action_type is None:
            self.assertEqual(query_set.count(), 0)
            self.assertEqual(paperwork.last_action, original_last_action)
        else:
            added_action = query_set.get()
            self.assertEqual(paperwork.last_action, added_action)
            self.assertEqual(added_action.type, added_action_type)
            self.assertEqual(added_action.effective_date, naive_date(u'2010-10-05'))

    def test_add_expiration_if_expired_method_with_request_adds_expiration(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.REQUEST,
                scenario=[],
                added_action_type=Action.TYPES.EXPIRATION)

    def test_add_expiration_if_expired_method_with_clarification_response_adds_expiration(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.CLARIFICATION_RESPONSE,
                scenario=[u'clarification_request', u'clarification_response'],
                added_action_type=Action.TYPES.EXPIRATION)

    def test_add_expiration_if_expired_method_with_appeal_adds_appeal_expiration(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.APPEAL,
                scenario=[u'expiration', u'appeal'],
                added_action_type=Action.TYPES.APPEAL_EXPIRATION)

    def test_add_expiration_if_expired_method_with_confirmation_adds_expiration(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.CONFIRMATION,
                scenario=[u'confirmation'],
                added_action_type=Action.TYPES.EXPIRATION)

    def test_add_expiration_if_expired_method_with_extension_adds_expiration(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.EXTENSION,
                scenario=[u'extension'],
                added_action_type=Action.TYPES.EXPIRATION)

    def test_add_expiration_if_expired_method_with_advancement_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.ADVANCEMENT,
                scenario=[u'advancement'],
                added_action_type=None)

    def test_add_expiration_if_expired_method_with_clarification_request_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.CLARIFICATION_REQUEST,
                scenario=[u'clarification_request'],
                added_action_type=None)

    def test_add_expiration_if_expired_method_with_disclosure_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.DISCLOSURE,
                scenario=[u'disclosure'],
                added_action_type=None)

    def test_add_expiration_if_expired_method_with_refusal_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.REFUSAL,
                scenario=[u'refusal'],
                added_action_type=None)

    def test_add_expiration_if_expired_method_with_affirmation_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.AFFIRMATION,
                scenario=[u'affirmation'],
                added_action_type=None)

    def test_add_expiration_if_expired_method_with_reversion_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.REVERSION,
                scenario=[u'reversion'],
                added_action_type=None)

    def test_add_expiration_if_expired_method_with_remandment_adds_expiration(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.REMANDMENT,
                scenario=[u'refusal', u'appeal', u'remandment'],
                added_action_type=Action.TYPES.EXPIRATION)

    def test_add_expiration_if_expired_method_with_advanced_request_adds_expiration(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.ADVANCED_REQUEST, branch=1,
                scenario=[u'advancement'],
                added_action_type=Action.TYPES.EXPIRATION)

    def test_add_expiration_if_expired_method_with_expiration_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.EXPIRATION,
                scenario=[u'expiration'],
                added_action_type=None)

    def test_add_expiration_if_expired_method_with_appeal_expiration_adds_nothing(self):
        self._test_add_expiration_if_expired_method_aux(Action.TYPES.APPEAL_EXPIRATION,
                scenario=[u'appeal_expiration'],
                added_action_type=None)

    def test_collect_obligee_emails_method(self):
        obligee = self._create_obligee(emails=u'Obligee1 <oblige1@a.com>, oblige2@a.com')
        _, paperwork, _ = self._create_inforequest_scenario(obligee,
                (u'request', dict(
                    email=dict(from_name=u'Request From', from_mail=u'request-from@a.com'),
                    recipients=[
                        dict(name=u'Request To1', mail=u'request-to1@a.com', type=Recipient.TYPES.TO),
                        dict(name=u'Request To2', mail=u'request-to2@a.com', type=Recipient.TYPES.TO),
                        dict(name=u'Request Cc', mail=u'request-cc@a.com', type=Recipient.TYPES.CC),
                        dict(name=u'Request Bcc', mail=u'request-bcc@a.com', type=Recipient.TYPES.BCC),
                        ],
                    )),
                (u'refusal', dict(
                    email=dict(from_name=u'Refusal From', from_mail=u'refusal-from@a.com'),
                    recipients=[
                        dict(name=u'Refusal To', mail=u'refusal-to@a.com', type=Recipient.TYPES.TO),
                        dict(name=u'Refusal Cc', mail=u'refusal-cc@a.com', type=Recipient.TYPES.CC),
                        dict(name=u'Refusal Bcc', mail=u'refusal-bcc@a.com', type=Recipient.TYPES.BCC),
                        ],
                    )),
                )

        result = paperwork.collect_obligee_emails()
        self.assertItemsEqual(result, [
                # Outboud email contributes with its recipient addresses only
                (u'Request To1',  u'request-to1@a.com'),
                (u'Request To2',  u'request-to2@a.com'),
                (u'Request Cc',   u'request-cc@a.com'),
                (u'Request Bcc',  u'request-bcc@a.com'),
                # Inbound email contributes with its from address only
                (u'Refusal From', u'refusal-from@a.com'),
                # Currect obligee addresses
                (u'Obligee1',     u'oblige1@a.com'),
                (u'',             u'oblige2@a.com'),
                ])

    def test_collect_obligee_emails_method_gives_priority_to_more_recent_messages(self):
        u"""
        Checks that if the same email address is used in multiple messages with different names,
        the name used with the most recent message has priority.
        """
        obligee = self._create_obligee(emails=u'Obligee <oblige@a.com>')
        _, paperwork, _ = self._create_inforequest_scenario(obligee,
                (u'request', dict(recipients=[dict(name=u'Request To', mail=u'address@a.com', type=Recipient.TYPES.TO)])),
                (u'refusal', dict(email=dict(from_name=u'Refusal From', from_mail=u'address@a.com'))),
                )

        result = paperwork.collect_obligee_emails()
        self.assertItemsEqual(result, [
                # Address name from later email has priority
                (u'Refusal From', u'address@a.com'),
                # Obligee instance address
                (u'Obligee',      u'oblige@a.com'),
                ])

    def test_collect_obligee_emails_method_gives_priority_to_obligee_instance(self):
        u"""
        Checks that if the same email address is used as obligee address and inbound message from
        adress with different names, the name used with obligee instance has priority.
        """
        obligee = self._create_obligee(emails=u'Obligee <address@a.com>')
        _, paperwork, _ = self._create_inforequest_scenario(obligee,
                (u'request', dict(recipients=[dict(name=u'Request To', mail=u'address@a.com', type=Recipient.TYPES.TO)])),
                (u'refusal', dict(email=dict(from_name=u'Refusal From', from_mail=u'address@a.com'))),
                )

        result = paperwork.collect_obligee_emails()
        self.assertItemsEqual(result, [
                # Obligee instance address has priority
                (u'Obligee', u'address@a.com'),
                ])

    def test_collect_obligee_emails_method_ignores_addresses_from_other_branches(self):
        obligee1 = self._create_obligee(emails=u'Obligee1 <obligee1@a.com>')
        obligee2 = self._create_obligee(emails=u'Ignored <obligee2@a.com>')
        _, paperwork, actions = self._create_inforequest_scenario(obligee1,
                u'request',
                u'refusal',
                (u'advancement', [obligee2, u'advanced_request', u'refusal']),
                )
        result = list(paperwork.collect_obligee_emails())
        self.assertItemsEqual(result, [(u'Obligee1', u'obligee1@a.com')])

        # For reference check that the method for the advanced paperwork returs the other address
        paperwork2 = [o for o in flatten(actions) if isinstance(o, Paperwork)][0]
        result = list(paperwork2.collect_obligee_emails())
        self.assertItemsEqual(result, [(u'Ignored', u'obligee2@a.com')])

    def test_repr(self):
        _, paperwork, _ = self._create_inforequest_scenario()
        self.assertEqual(repr(paperwork), u'<Paperwork: %s>' % paperwork.pk)

# vim: expandtab
# -*- coding: utf-8 -*-
import json
import re
import string
import random
from textwrap import dedent

class JsonFile(object):
    def __init__(self, inputfile, outputfile=None):
        self.inputfile = inputfile
        self.outputfile = outputfile or inputfile
        with open(inputfile) as json_file:
            self.data = json.load(json_file)

    def __enter__(self):
        return self.data

    def __exit__(self, type, value, traceback):
        if type is None:
            with open(self.outputfile, u'w') as json_file:
                json.dump(self.data, json_file, indent=2)

class Configure(object):
    def __init__(self, filename=u'configure.json'):
        self.filename = filename
        try:
            with open(filename) as json_file:
                self.data = json.load(json_file)
        except IOError:
            self.data = {}

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if type is None:
            with open(self.filename, u'w') as json_file:
                json.dump(self.data, json_file, indent=2, sort_keys=True)

    def auto(self, key, default):
        return self.data.setdefault(key, default)

    def input(self, key, prompt, default=u'', required=False):
        configured = self.data.get(key, default)
        while True:
            inputed = raw_input(u'\n%s [%s]: ' % (prompt, configured)) or configured
            if required and not inputed:
                print(u'\nError: The value is required.')
                continue
            break
        self.data[key] = inputed
        return inputed

class Settings(object):
    def __init__(self, filename=u'chcemvediet/settings_configured.py'):
        self.filename = filename
        self.lines = []
        self.comment(u'This file was autogenerated by `configure.py`. Do NOT edit it.')

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if type is None:
            with open(self.filename, u'w') as settings_file:
                settings_file.write(u'\n'.join(self.lines) + u'\n')

    def comment(self, text):
        for line in text.split(u'\n'):
            self.lines.append(u'# %s' % line)

    def import_(self, modul, words=None):
        if not words:
            self.lines.append(u'import %s' % modul)
        elif isinstance(words, basestring):
            self.lines.append(u'from %s import %s' % (modul, words))
        else:
            self.lines.append(u'from %s import %s' % (modul, u', '.join(words)))

    def setting(self, name, value):
        self.lines.append(u'%s = %s' % (name, repr(value)))

def generate_secret_key():
    # Based on: http://techblog.leosoto.com/django-secretkey-generation/
    chars = string.digits + string.letters + string.punctuation
    return u''.join(random.SystemRandom().choice(chars) for i in range(100))


if __name__ == u'__main__':
    with Configure() as configure, Settings() as settings:

        # Django Secret Key generated only if not stored in the configuration, yet.
        settings.setting(u'SECRET_KEY', configure.auto(u'secret_key', generate_secret_key()))

        # Social accounts Client IDs and Secrets
        print(dedent(u"""
                Enter your OAuth Client IDs and Secrets for social account providers. If you
                don't want to use some providers, just skip them by entering empty strings.
                Don't share the keys with anybody and never push them to git."""))
        with JsonFile(u'fixtures/socialaccount_socialapp.json.tpl', u'fixtures/socialaccount_socialapp.configured.json') as data:
            for entry in data:
                if entry[u'model'] == u'socialaccount.socialapp':
                    entry[u'fields'][u'client_id'] = configure.input(u'%s_client_id' % entry[u'fields'][u'provider'], u'%s Client ID' % entry[u'fields'][u'name'])
                    entry[u'fields'][u'secret'] = configure.input(u'%s_secret' % entry[u'fields'][u'provider'], u'%s Secret' % entry[u'fields'][u'name'])

        # Obligee dummy mails
        print(dedent(u"""
                To prevent unsolicited emails to obligees while testing we replace their
                addresses with dummies. Use '{name}' as a placeholder to distinguish individual
                obligees. For instance 'mail@{name}.example.com' may be expanded to
                'mail@martika-hnusta.example.com'."""))
        mail_tpl = configure.input(u'obligee_dummy_mail', u'Obligee dummy e-mail', required=True)
        with JsonFile(u'fixtures/obligees_obligee.json.tpl', u'fixtures/obligees_obligee.configured.json') as data:
            for entry in data:
                if entry[u'model'] == u'obligees.obligee':
                    slug = entry[u'fields'][u'slug'].strip(u'-')
                    mail = mail_tpl.format(name=slug)
                    entry[u'fields'][u'email'] = mail


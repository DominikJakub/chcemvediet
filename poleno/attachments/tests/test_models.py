# vim: expandtab
# -*- coding: utf-8 -*-
import datetime
from testfixtures import TempDirectory

from django.core.files.base import ContentFile
from django.db import IntegrityError
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.test import TestCase
from django.test.utils import override_settings

from poleno.timewarp import timewarp
from poleno.utils.date import utc_now, utc_datetime_from_local, local_datetime_from_local

from ..models import Attachment

class AttachmentModelTest(TestCase):
    u"""
    Tests ``Attachment`` model.
    """

    def setUp(self):
        timewarp.enable()
        timewarp.reset()

        self.tempdir = TempDirectory()

        self.settings_override = override_settings(
            MEDIA_ROOT=self.tempdir.path,
            PASSWORD_HASHERS=(u'django.contrib.auth.hashers.MD5PasswordHasher',),
            )
        self.settings_override.enable()

        self.user = User.objects.create_user(u'john', u'lennon@thebeatles.com', u'johnpassword')
        self.user2 = User.objects.create_user(u'smith', u'agent@smith.com', u'big_secret')

    def tearDown(self):
        timewarp.reset()

        self.settings_override.disable()
        self.tempdir.cleanup()


    def test_create_instance(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertIsNotNone(obj.pk)

    def test_generic_object_field(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertEqual(obj.generic_type, ContentType.objects.get_for_model(User))
        self.assertEqual(obj.generic_id, self.user.pk)
        self.assertEqual(obj.generic_object, self.user)

    def test_generic_object_field_may_not_be_omitted(self):
        with self.assertRaisesMessage(IntegrityError, u'attachments_attachment.generic_type_id may not be NULL'):
            Attachment.objects.create(
                    # generic_object omitted
                    file=ContentFile(u'content'),
                    name=u'filename',
                    content_type=u'text/plain',
                    )

    def test_file_field(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertRegexpMatches(obj.file.name, u'^attachments/[\w\d]+$')
        self.assertEqual(obj.file.size, 7)
        try:
            obj.file.open(u'rb')
            self.assertEqual(obj.file.read(), u'content')
        finally:
            obj.file.close()

    def test_file_field_may_not_be_omitted(self):
        with self.assertRaisesMessage(OSError, u'No such file or directory'):
            obj = Attachment.objects.create(
                    generic_object=self.user,
                    # file omitted
                    name=u'filename',
                    content_type=u'text/plain',
                    )

    def test_file_field_name_overriden_when_creating_new_instance(self):
        u"""
        Checks that when creating a new attachment its file name is always autogenerated, even if
        it was set explicitly.
        """
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content', name=u'overriden'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertNotIn(u'overriden', obj.file.name)

    def test_file_field_name_unchanged_when_saving_existing_instance(self):
        u"""
        Checks that when saving an already existing instance its file name is kept as it was when
        the instance was created.
        """
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        original_filename = obj.file.name
        obj.name = u'changed'
        obj.save()
        self.assertEqual(obj.name, u'changed')
        self.assertEqual(obj.file.name, original_filename)

    def test_name_and_content_type_fields(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertEqual(obj.name, u'filename')
        self.assertEqual(obj.content_type, u'text/plain')

    def test_name_and_content_type_fields_with_empty_values_if_omitted(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                # name omitted
                # content_type omitted
                )
        self.assertEqual(obj.name, u'')
        self.assertEqual(obj.content_type, u'')

    def test_created_field_with_explicit_value(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                created=utc_datetime_from_local(u'2014-10-05 15:33:10'),
                )
        self.assertEqual(obj.created, utc_datetime_from_local(u'2014-10-05 15:33:10'))

    def test_created_field_with_default_value_if_omitted(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                # created omitted
                )
        self.assertAlmostEqual(obj.created, utc_now(), delta=datetime.timedelta(seconds=10))

    def test_created_field_unchanges_when_saving_existing_instance(self):
        timewarp.jump(local_datetime_from_local(u'2014-10-05 15:33:10'))
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertAlmostEqual(obj.created, utc_datetime_from_local(u'2014-10-05 15:33:10'), delta=datetime.timedelta(seconds=10))

        timewarp.jump(local_datetime_from_local(u'2014-10-07 20:23:11'))
        obj.name = u'changed'
        obj.save()
        self.assertAlmostEqual(obj.created, utc_datetime_from_local(u'2014-10-05 15:33:10'), delta=datetime.timedelta(seconds=10))

    def test_size_field_with_overriden_explicit_value(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                size=47,
                )
        self.assertEqual(obj.size, 7)

    def test_size_field_with_default_value_if_omitted(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                # size omitted
                )
        self.assertEqual(obj.size, 7)

    def test_content_property(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertEqual(obj.content, u'content')

    def test_clone_method_clone_is_not_saved_automatically(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        new = obj.clone()
        self.assertIsNone(new.pk)

    def test_clone_method_fields_after_clone_saved(self):
        u"""
        Checks that all fields but ``file.name`` are copied to the clone.
        """
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        new = obj.clone()
        new.save()
        self.assertIsNotNone(new.pk)
        self.assertEqual(new.generic_type, obj.generic_type)
        self.assertEqual(new.generic_id, obj.generic_id)
        self.assertEqual(new.generic_object, obj.generic_object)
        self.assertEqual(new.name, obj.name)
        self.assertEqual(new.content_type, obj.content_type)
        self.assertEqual(new.created, obj.created)
        self.assertEqual(new.size, obj.size)
        self.assertEqual(new.content, obj.content)

    def test_clone_method_clone_has_new_file_name(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        new = obj.clone()
        self.assertIsNone(new.file.name)
        new.save()
        self.assertNotEqual(new.file.name, obj.file.name)
        self.assertRegexpMatches(new.file.name, u'^attachments/[\w\d]+$')

    def test_clone_method_clone_has_old_created_value(self):
        timewarp.jump(local_datetime_from_local(u'2014-10-05 15:33:10'))
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertAlmostEqual(obj.created, utc_datetime_from_local(u'2014-10-05 15:33:10'), delta=datetime.timedelta(seconds=10))

        timewarp.jump(local_datetime_from_local(u'2014-10-07 20:23:11'))
        new = obj.clone()
        new.save()
        self.assertAlmostEqual(new.created, utc_datetime_from_local(u'2014-10-05 15:33:10'), delta=datetime.timedelta(seconds=10))

    def test_repr(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        self.assertEqual(repr(obj), u'<%s: %s>' % (Attachment.__name__, obj.pk))

    def test_attached_to_query_method_with_queryset(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        obj2 = Attachment.objects.create(
                generic_object=self.user2,
                file=ContentFile(u'content2'),
                name=u'filename2',
                content_type=u'text/plain',
                )
        result = Attachment.objects.attached_to(User.objects.filter(pk=self.user2.pk))
        self.assertItemsEqual(result, [obj2])

    def test_attached_to_query_method_with_model_instance(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        obj2 = Attachment.objects.create(
                generic_object=self.user2,
                file=ContentFile(u'content2'),
                name=u'filename2',
                content_type=u'text/plain',
                )
        result = Attachment.objects.attached_to(self.user)
        self.assertItemsEqual(result, [obj])

    def test_attached_to_query_method_with_model_class(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        obj2 = Attachment.objects.create(
                generic_object=self.user2,
                file=ContentFile(u'content2'),
                name=u'filename2',
                content_type=u'text/plain',
                )
        result = Attachment.objects.attached_to(User)
        self.assertItemsEqual(result, [obj, obj2])

    def test_attached_to_query_method_with_multiple_arguments(self):
        obj = Attachment.objects.create(
                generic_object=self.user,
                file=ContentFile(u'content'),
                name=u'filename',
                content_type=u'text/plain',
                )
        obj2 = Attachment.objects.create(
                generic_object=self.user2,
                file=ContentFile(u'content2'),
                name=u'filename2',
                content_type=u'text/plain',
                )
        result = Attachment.objects.attached_to(User, self.user, User.objects.filter(pk=self.user2.pk), self.user2)
        self.assertItemsEqual(result, [obj, obj2])

    def test_attached_to_query_method_with_invalid_argument(self):
        with self.assertRaisesMessage(TypeError, u'Expecting QuerySet, Model instance, or Model class.'):
            result = Attachment.objects.attached_to(object)
        with self.assertRaisesMessage(TypeError, u'Expecting QuerySet, Model instance, or Model class.'):
            result = Attachment.objects.attached_to(None)
